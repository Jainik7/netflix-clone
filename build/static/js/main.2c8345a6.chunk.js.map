{"version":3,"sources":["axios.js","Requests.js","Banner.js","Nav.js","Row.js","HomeScreen.js","App.js","features/counter/counterAPI.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","transitionNavBar","window","scrollY","addEventListener","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","id","HomeScreen","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c8345a6.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = \"92be9c3ed65d0923385b0b1d53c73ed3\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;","import React, { useEffect, useState } from 'react';\r\nimport \"./Banner.css\";\r\nimport axios from './axios';\r\nimport requests from './Requests';\r\n\r\nfunction Banner() {\r\n\r\n  const [movie, setMovie] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function truncate(string, n){\r\n    return string?.length > n ? string.substr(0, n - 1) + '...' : string;\r\n  }\r\n\r\n  return (\r\n    <header \r\n      className='banner' \r\n      style={{\r\n        backgroundSize: 'cover',\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        <h1 className=\"banner__title\">\r\n        {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">Play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n        <h1 className=\"banner__description\"> {truncate(movie?.overview, 150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React from 'react';\r\nimport './Nav.css';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nfunction Nav() {\r\n\r\n  const [show, handleShow] = useState(false);\r\n\r\n  const transitionNavBar = () => {\r\n    if (window.scrollY > 100) {\r\n      handleShow(true);\r\n    } else {\r\n      handleShow(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n  window.addEventListener(\"scroll\",\r\n  transitionNavBar);\r\n  return () => window.removeEventListener(\"scroll\",\r\n  transitionNavBar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && 'nav__black'}`}>\r\n      <div className=\"nav__contents\">\r\n      <img \r\n      className='nav__logo'\r\n      src=\"http://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\"\r\n      />\r\n\r\n      <img \r\n      className='nav__avatar'\r\n      src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" \r\n      alt=\"\"\r\n      />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import axios from './axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './Row.css';\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n  \r\n  return (\r\n  <div className='row'>\r\n    <h2>{title}</h2>\r\n    \r\n    <div className=\"row__posters\">\r\n\r\n    {movies.map(\r\n      (movie) => \r\n      ((isLargeRow && movie.poster_path) ||\r\n      (!isLargeRow && movie.backdrop_path)) && (\r\n      <img \r\n      className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n      key={movie.id}\r\n      src ={`${base_url}${\r\n       isLargeRow ? movie.poster_path : movie.backdrop_path\r\n      }`} \r\n      alt={movie.name} \r\n      />\r\n     )\r\n    )}\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Banner from './Banner';\r\nimport './HomeScreen.css';\r\nimport Nav from './Nav';\r\nimport requests from './Requests';\r\nimport Row from './Row';\r\n\r\nfunction HomeScreen() {\r\n  return (\r\n    <div className=\"HomeScreen\">\r\n      <Nav />\r\n      <Banner />\r\n      <Row \r\n        title='NETFLIX ORIGINALS'\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title='Trending Now'\r\n        fetchUrl={requests.fetchTrending} />\r\n      <Row title='Top Rated'\r\n        fetchUrl={requests.fetchTopRated} />\r\n      <Row title='Action Movies'\r\n        fetchUrl={requests.fetchActionMovies} \r\n      />\r\n      <Row title='Comedy Movies'\r\n        fetchUrl={requests.fetchComedyMovies} \r\n      />\r\n      <Row title='Romance Movies'\r\n        fetchUrl={requests.fetchRomanceMovies}\r\n      />\r\n        <Row title='Horror Movies'\r\n        fetchUrl={requests.fetchHorrorMovies}\r\n      />\r\n      <Row title='Documentaries'\r\n        fetchUrl={requests.fetchDocumentaries} \r\n      />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeScreen;\r\n","import React from 'react';\nimport './App.css';\nimport HomeScreen from './HomeScreen';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <HomeScreen />   \n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}